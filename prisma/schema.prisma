generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id @default(uuid())
  username String
  password String
}

model User {
  id                 String        @id @default(uuid())
  fullname           String
  email              String        @unique
  phone              String        @unique
  grade              String
  password           String
  role               Role
  isVerified         Boolean       @default(true)
  createdAt          DateTime      @default(now())
  city               String
  refercode          String?
  productivityPoints Productivity?
  order              Order[]
  Wallet             Wallet?
  QuizResult         QuizResult[]
}

model Creativity {
  id          Int    @id @default(autoincrement())
  name        String
  author      String
  rating      String
  review      String
  price       String
  description String @db.Text
  url         String
}

model Opportunity {
  id          Int    @id @default(autoincrement())
  title       String
  description String @db.Text
}

model Productivity {
  id        String   @id @default(uuid())
  points    Int
  createdAt DateTime @default(now())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model NoticeBoard {
  id     Int             @id @default(autoincrement())
  plan   NoticeBoardPlan
  type   NoticeBoardType
  rank   String
  name   String
  points String
}

model News {
  id          Int    @id @default(autoincrement())
  title       String
  description String @db.Text
  imgurl      String @db.Text
}

model LifeSkills {
  id          Int    @id @default(autoincrement())
  title       String
  description String @db.Text
  price       String
  url         String @db.Text
}

model SpokenEnglish {
  id          Int    @id @default(autoincrement())
  name        String
  author      String
  rating      String
  review      String
  price       String
  description String @db.Text
  url         String @db.Text
}

model InterviewTraining {
  id          Int    @id @default(autoincrement())
  title       String
  price       String
  description String @db.Text
  url         String @db.Text
}

model WorkShop {
  id          Int    @id @default(autoincrement())
  name        String
  author      String
  rating      String
  review      String
  price       String
  description String @db.Text
  url         String @db.Text
}

model Shop {
  id          Int    @id @default(autoincrement())
  name        String
  price       String
  description String @db.Text
  plan        Role
  imgurl      String @db.Text
  producturl  String @db.Text
}

model Order {
  id          Int    @id @default(autoincrement())
  productname String
  price       String
  date        String
  userId      String
  User        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Wallet {
  id     Int    @id @default(autoincrement())
  amount String
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model QuizModel {
  id           Int             @id @default(autoincrement())
  plan         NoticeBoardPlan
  quiztype     NoticeBoardType
  isactive     Boolean
  QuizQuestion QuizQuestion[]
}

model QuizQuestion {
  id          Int       @id @default(autoincrement())
  quizModelId Int
  quizmodel   QuizModel @relation(fields: [quizModelId], references: [id], onDelete: Cascade)
  question    String    @db.Text
  Choice      Choice[]
}

model Choice {
  id             Int          @id @default(autoincrement())
  choice         String
  iscorrect      Boolean
  quizQuestionId Int
  quizQuestion   QuizQuestion @relation(fields: [quizQuestionId], references: [id], onDelete: Cascade)
}

model QuizResult {
  id     Int             @id @default(autoincrement())
  userId String
  user   User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  score  String
  plan   NoticeBoardPlan
  type   NoticeBoardType
}

enum Role {
  FOUNDATION
  TOP
  PRO
}

enum NoticeBoardPlan {
  FOUNDATION
  TOP
  PRO
}

enum NoticeBoardType {
  DAILY
  WEEKLY
  MONTHLY
}
